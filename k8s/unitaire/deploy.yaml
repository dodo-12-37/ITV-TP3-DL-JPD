

---
#service mssql
apiVersion: v1
kind: Service
metadata:
  name: mssql
  namespace: unitaire
spec:
  type: NodePort
  selector:
    app: mssql
  ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mssql # name of the StatefulSet workload, the SQL Server instance name is derived from this. We suggest to keep this name same as the .spec.template.metadata.labels, .spec.selector.matchLabels and .spec.serviceName to avoid confusion.
  namespace: unitaire
spec:
  serviceName: "mssql" # serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set.
  replicas: 1 # only one pod, with one SQL Server instance deployed.
  selector:
    matchLabels:
      app: mssql # this has to be the same as .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: mssql # this has to be the same as .spec.selector.matchLabels, as documented [here](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/):
    spec:
      containers:
        - name: mssql # container name within the pod.
          image: mcr.microsoft.com/mssql/server:2022-latest
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "3Gi"
              cpu: "1000m"
          ports:
            - containerPort: 1433
              name: tcpsql
          env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_ENABLE_HADR
              value: "1"
            - name: MSSQL_AGENT_ENABLED
              value: "1"
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: MSSQL_SA_PASSWORD
          volumeMounts:
            - name: mssqldb-volume
              mountPath: "/var/opt/mssql/data"
      volumes:
        - name: mssqldb-volume
          persistentVolumeClaim:
            claimName: mssql-data-claim

---
#service for webreact
apiVersion: v1
kind: Service
# type of service
metadata:
  name: webreact
  namespace: "unitaire"
spec:
  type: NodePort # type of service
  selector:
    app: GC.WebReact
  ports:
    - name: http
      protocol: TCP
      port: 80 # port exposed internally by the service
      targetPort: 80 # port exposed by the container
      nodePort: 30000 # port accessible from outside the cluster  #Taper http://127.0.0.1:30000/ dans son navigateur

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gc.webreact
  namespace: "unitaire"
  labels:
    app: GC.WebReact
    tier: web
    env: unitaire
spec:
  replicas: 1
  selector:
    matchLabels:
      app: GC.WebReact
      tier: web
      env: unitaire
  template:
    metadata:
      labels:
        app: GC.WebReact
        tier: web
        env: unitaire
    spec:
      containers:
        - name: webreact
          image: dodo1237/tp3itv:alpha
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "1000m"
          ports:
            - containerPort: 80
          env:
            - name: ConnectionStrings__DefaultConnection
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: connection_string
