# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: "production"

---
# Secret
apiVersion: v1
kind: Secret
metadata:
  name: secrets
  namespace: "production"
type: Opaque
data:
  connection_string: U2VydmVyPW1zc3FsO0RhdGFiYXNlPUdDLldlYlJlYWN0O1VzZXIgSWQ9U0E7UGFzc3dvcmQ9eW91clN0cm9uZyghKVBhc3N3b3JkO011bHRpcGxlQWN0aXZlUmVzdWx0U2V0cz10cnVl
  MSSQL_SA_PASSWORD: eW91clN0cm9uZyghKVBhc3N3b3Jk

---
# Service for webreact
apiVersion: v1
kind: Service
metadata:
  name: webreact
  namespace: "production"
spec:
  type: NodePort # type of service
  selector:
    app: GC.WebReact
    tier: web
  ports:
    - name: http
      protocol: TCP
      port: 80 # port exposed internally by the service
      targetPort: 80 # port exposed by the container
      nodePort: 30002 # port accessible from outside the cluster

---
# Deployment for webreact
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gc.webreact
  namespace: "production"
  labels:
    app: GC.WebReact
    tier: web
    env: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: GC.WebReact
      tier: web
      env: production
  template:
    metadata:
      labels:
        app: GC.WebReact
        tier: web
        env: production
    spec:
      containers:
        - name: webreact
          image: dodo1237/tp3itv:alpha
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "1000m"
          ports:
            - containerPort: 80
          env:
            - name: ConnectionStrings__DefaultConnection
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: connection_string

---
# PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mssqldb-production
  # namespace: "production"
  labels:
    type: local
spec:
  claimRef:
    namespace: production
    name: mssql-data-claim
  storageClassName: manual
  capacity:
    storage: 6Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/run/desktop/mnt/host/c/itv/ITV-TP3-DL-JPD/persistence/production"

---
# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: production
  name: mssql-data-claim
spec:
  volumeName: mssqldb-production
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Service for mssql
apiVersion: v1
kind: Service
metadata:
  name: mssql
  namespace: production
spec:
  type: NodePort
  selector:
    app: mssql
    tier: database
  ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433

---
# StatefulSet for mssql
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mssql # name of the StatefulSet workload, the SQL Server instance name is derived from this. We suggest to keep this name same as the .spec.template.metadata.labels, .spec.selector.matchLabels and .spec.serviceName to avoid confusion.
  namespace: production
  labels:
    app: GC.WebReact
    tier: database
    env: production
spec:
  serviceName: "mssql" # serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set.
  replicas: 1 # only one pod, with one SQL Server instance deployed.
  selector:
    matchLabels:
      app: mssql # this has to be the same as .spec.template.metadata.labels
      # app: GC.WebReact 
      # tier: database
      # env: production
  template:
    metadata:
      labels:
        app: mssql # this has to be the same as .spec.selector.matchLabels, as documented [here](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/):
        # app: GC.WebReact
        # tier: database
        # env: production
    spec:
      containers:
        - name: mssql # container name within the pod.
          image: mcr.microsoft.com/mssql/server:2022-latest
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "3Gi"
              cpu: "1000m"
          ports:
            - containerPort: 1433
              name: tcpsql
          env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_ENABLE_HADR
              value: "1"
            - name: MSSQL_AGENT_ENABLED
              value: "1"
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: MSSQL_SA_PASSWORD
          volumeMounts:
            - name: mssqldb-volume
              mountPath: "/var/opt/mssql/data"
      volumes:
        - name: mssqldb-volume
          persistentVolumeClaim:
            claimName: mssql-data-claim


